# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

variables:
  resource_group_tfstate: '$(shortcode)-tfstate-rg'
  location: 'uksouth'

steps:
- task: AzureResourceManagerTemplateDeployment@3
  displayName: 'ARM Template deployment: Resource Group scope'
  inputs:
    azureResourceManagerConnection: $(armConnection)
    subscriptionId: '$(subscription_id)'
    resourceGroupName: '$(resource_group_tfstate)'
    location: '$(location)'
    csmFile: $(System.DefaultWorkingDirectory)/infrastructure/backend/tfbackend.deploy.json

- task: keesschollaart.arm-outputs.arm-outputs.ARM Outputs@6
  displayName: 'ARM Outputs'
  inputs:
    ConnectedServiceNameARM: $(armConnection)
    resourceGroupName: '$(resource_group_tfstate)'

- task: qetza.replacetokens.replacetokens-task.replacetokens@3
  displayName: 'Replace tokens in **/*.tfvars'
  inputs:
    rootDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/storage-account'
    targetFiles: '**/*.tfvars'
    escapeType: none
    tokenPrefix: '__'
    tokenSuffix: '__'
    enableTelemetry: false

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
  displayName: 'Install Terraform 0.12.29'
  inputs:
    terraformVersion: 0.12.29

- task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
  displayName: 'Terraform : azurerm'
  inputs:
    workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/storage-account'
    backendServiceArm: $(armConnection)
    backendAzureRmResourceGroupName: '$(resource_group_tfstate)'
    backendAzureRmStorageAccountName: '$(ARM_uniqueStorageAccountName)'
    backendAzureRmContainerName: tfstate
    backendAzureRmKey: tf

