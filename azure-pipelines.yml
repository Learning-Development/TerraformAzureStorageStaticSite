# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  resource_group_tfstate: 'tfstate-uks-rg'
  location: 'uksouth'
  product: 'lg'
  shortcode: 'staticsite'
  environment_name: 'dev'
  location_short_code: 'uks'
  backendAzureRmResourceGroupName: 'tfstate-uks-rg'  
  backendAzureRmContainerName: tfstate
  backendAzureRmKey: tf

jobs:
- job: Infrastructure
  displayName: 'Infrastructure'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: AzureResourceManagerTemplateDeployment@3
    displayName: 'ARM Template deployment: Resource Group scope'
    inputs:
      deploymentScope: 'Resource Group'
      azureResourceManagerConnection: '$(armConnection)'
      subscriptionId: '$(subscription_id)'
      action: 'Create Or Update Resource Group'
      resourceGroupName: 'tfstate-uks-rg'
      location: '$(location)'
      templateLocation: 'Linked artifact'
      csmFile: '$(System.DefaultWorkingDirectory)/infrastructure/backend/tfbackend.deploy.json'
      deploymentMode: 'Incremental'

  - task: keesschollaart.arm-outputs.arm-outputs.ARM Outputs@6
    displayName: 'ARM Outputs'
    inputs:
      ConnectedServiceNameARM: $(armConnection)
      resourceGroupName: 'tfstate-uks-rg'

  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: 'Replace tokens in **/*.tfvars'
    inputs:
      rootDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/storage-account'
      targetFiles: '**/*.tfvars'
      escapeType: none
      tokenPrefix: '__'
      tokenSuffix: '__'
      enableTelemetry: false

  - task: CmdLine@2
    inputs:
      script: 'cat $(System.DefaultWorkingDirectory)/infrastructure/storage-account/az-storage-account-variables.tfvars'

  - task: TerraformInstaller@0
    displayName: 'Install Terraform 0.12.29'
    inputs:
      terraformVersion: 0.12.29

  - task: TerraformTaskV1@0
    displayName: 'Terraform init'
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/storage-account'
      commandOptions: '-backend-config=$(System.DefaultWorkingDirectory)/infrastructure/storage-account/az-storage-account-variables.tfvars'
      backendServiceArm: '$(armConnection)'
      backendAzureRmResourceGroupName: '$(resource_group_tfstate)'
      backendAzureRmStorageAccountName: '$(ARM_StorageAccountName)'
      backendAzureRmContainerName: '$(backendAzureRmContainerName)'
      backendAzureRmKey: '$(backendAzureRmKey)'

  - task: TerraformTaskV1@0
    displayName: 'Terraform plan'
    inputs:
      provider: 'azurerm'
      command: 'plan'
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/storage-account'
      commandOptions: '-var-file="$(System.DefaultWorkingDirectory)/infrastructure/storage-account/az-storage-account-variables.tfvars" --out=planfile'
      environmentServiceNameAzureRM: '$(armConnection)'
      backendServiceArm: '$(armConnection)'
      backendAzureRmResourceGroupName: '$(resource_group_tfstate)'
      backendAzureRmStorageAccountName: '$(ARM_StorageAccountName)'
      backendAzureRmContainerName: $(backendAzureRmContainerName)
      backendAzureRmKey: '$(backendAzureRmKey)'

  - task: TerraformTaskV1@0
    displayName: 'Terraform apply'
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: '$(System.DefaultWorkingDirectory)/infrastructure/storage-account'
      commandOptions: '-auto-approve planfile'
      environmentServiceNameAzureRM: '$(armConnection)'
      backendServiceArm: '$(armConnection)'
      backendAzureRmResourceGroupName: '$(resource_group_tfstate)'
      backendAzureRmStorageAccountName: '$(ARM_StorageAccountName)'
      backendAzureRmContainerName: $(backendAzureRmContainerName)
      backendAzureRmKey: '$(backendAzureRmKey)'

- job: Deploy
  displayName: 'Deploy'
  pool:
    vmImage: 'windows-latest'
  dependsOn: 'Infrastructure'

  steps:    
  - task: AzureFileCopy@3
    inputs:
      SourcePath: '$(System.DefaultWorkingDirectory)/code'
      azureSubscription: '$(armConnection)'
      Destination: 'AzureBlob'
      storage: 'staticsitelgdevuksstor'
      ContainerName: '$web'